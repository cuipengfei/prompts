description = "进入计划模式 —— 分析问题并生成 TODO 清单（只读分析），批准后执行并跟踪进度"

prompt = """
# 计划模式工作流

你进入了 **Plan Mode（计划模式）**。在此模式下，你的任务是分析问题并制定执行计划，**不要直接修改代码文件**。

---

## ⚠️ 任务分类（首先判断）

### ❌ 不应使用计划模式的情况（研究任务）
如果用户只想：
- 理解代码如何工作
- 搜索/查找特定函数或变量
- 解释错误信息或日志
- 分析现有实现方式
- 比较不同方案

→ **直接分析并回答，不要生成 TODO 清单**

### ✅ 应使用计划模式的情况（编码任务）
如果用户要求：
- 修改/添加/删除代码功能
- 修复 bug
- 重构代码结构
- 更新文档或配置

→ **继续执行计划流程：分析 → TODO → 批准 → 执行**

---

## 阶段 1: 计划模式（只读分析）

### 📋 工具使用规则

**✅ 允许使用（只读工具）**：
- `read_file`, `read_many_files` - 读取文件
- `list_directory`, `glob` - 浏览文件结构
- `search_file_content` - 搜索代码

**❌ 严格禁止（写入工具）**：
- `replace` - 替换文件内容
- `write_file` - 写入文件
- `run_shell_command` - 执行可能修改文件的命令

### 你需要做的：

1. **理解需求**
   - 明确用户想要解决的问题
   - 识别核心目标和约束条件

2. **分析代码库**
   - 查找相关代码
   - 读取关键文件
   - 定位需要修改的文件
   - **禁止修改代码**

3. **制定 TODO 清单**
   
   **格式要求（每项必须包含）**：
   - 📁 **文件路径**：完整的文件路径（如 `src/utils.js`）
   - 📍 **具体位置**：函数名/类名/行号范围
   - ✏️ **修改内容**：做什么（动词开头）
   - 💡 **修改原因**：为什么（解决什么问题）

   按以下格式输出：

   ```markdown
   # Plan: [一句话描述任务目标]
   生成时间: [当前日期时间]

   ## 问题分析
   - 当前状态：[描述]
   - 需要解决的问题：[列表]
   - 影响范围：[文件列表]

   ## TODO List
   - [ ] 1. **[文件路径]** `[位置]` - [修改内容]（[原因]）
   - [ ] 2. **[文件路径]** `[位置]` - [修改内容]（[原因]）
   - [ ] 3. **[文件路径]** `[位置]` - [修改内容]（[原因]）
   
   ## 预期结果
   [描述完成后的状态]
   ```

4. **请求用户批准**
   输出 TODO 清单后，询问：
   ```
   请确认是否批准此计划？
   - 输入 "yes" 或 "批准"：开始执行并保存 TODO 到 .plan-todo.md
   - 输入 "no" 或 "修改"：说明需要调整的部分
   ```

5. **计划阶段自检**
   在等待用户批准时，确认：
   ```
   ✅ 计划阶段检查清单：
   - [ ] 已生成详细 TODO 清单（包含文件路径+位置+原因）
   - [ ] 零文件被修改（仅执行了只读分析）
   - [ ] 未使用 replace/write_file 工具
   
   ⚠️ 如果你修改了任何代码文件，说明流程出错，请立即停止并重新规划
   ```

---

## 阶段 2: 执行模式（用户批准后）

⚠️ **注意**: 只有在用户明确批准后，才允许使用写入工具（包括创建/更新 `.plan-todo.md`）

### 当用户批准计划后：

1. **保存 TODO 清单**
   - 将批准的 TODO 清单写入 `.plan-todo.md`（工作区根目录）
   - 保持 Markdown checklist 格式
   - 添加 `## Completed` 部分用于记录已完成项

2. **执行任务**
   按 TODO 顺序执行，每完成一项：
   
   a. **执行操作**（使用 `replace` / `write_file` 等工具修改代码）
   
   b. **更新 TODO 文件**：
      - 读取 `.plan-todo.md`
      - 将对应项从 `- [ ]` 改为 `- [x]`
      - 移动到 `## Completed` 部分并添加时间戳
      
   c. **汇报进度**：
      ```
      ✅ 完成: [任务描述]
      剩余: X 项
      ```

3. **完成后确认**
   所有任务完成后：
   ```
   🎉 所有任务已完成！
   
   查看完整记录: .plan-todo.md
   ```

---

## TODO 文件格式示例

```markdown
# Plan: 添加用户输入验证功能
生成时间: 2025-10-30 14:23

## 问题分析
- 当前状态：src/utils.js 中的 processUserInput() 函数缺少输入验证
- 需要解决的问题：防止无效输入导致的运行时错误
- 影响范围：src/utils.js, src/utils.test.js, docs/API.md

## TODO List
- [ ] 1. **src/utils.js** `processUserInput()` - 添加参数类型检查（防止 null/undefined 导致崩溃）
- [ ] 2. **src/utils.test.js** 新增测试套件 - 编写 5 个边界测试用例（覆盖非法输入场景）
- [ ] 3. **docs/API.md** 参数说明章节 - 补充类型、必填性和异常情况文档（方便 API 使用者）

## Completed
(完成的任务将移动到此处)

---
最后更新: 2025-10-30 14:23
```

---

## 重要约束

### 计划模式下 **禁止**：
- ❌ 使用 Edit 工具修改代码文件
- ❌ 使用 WriteFile 创建/修改代码文件（.plan-todo.md 除外）
- ❌ 直接执行用户需求（必须先制定计划）

### 执行模式下 **必须**：
- ✅ 每完成一项任务立即更新 .plan-todo.md
- ✅ 在 Completed 部分添加时间戳
- ✅ 按 TODO 顺序执行（除非用户要求调整）

### 文件管理：
- `.plan-todo.md` 应该在工作区根目录
- 如果 `.gitignore` 不包含 `.plan-todo.md`，提醒用户添加
- 使用 Markdown checklist 格式（不用 JSON）

---

## 快速参考

**当前模式识别**：
- 用户调用 `/plan` → 进入计划模式
- 用户批准计划 → 进入执行模式

**状态文件**：
- `.plan-todo.md` - 当前工作区的 TODO 跟踪
- 每个工作区独立（不跨目录共享）

**工作流**：
```
/plan → 分析 → 生成TODO → 用户批准 → 保存.plan-todo.md → 执行 → 更新TODO → 完成
```
"""
